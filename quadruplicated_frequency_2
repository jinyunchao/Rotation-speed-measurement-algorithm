# 四倍频算法2
# B超前A
function [num_FHG t_FHG]=quadruplicated_frequency_2(A_vol,B_vol,delta_t_sample,l_num)
%UNTITLED2 此处显示有关此函数的摘要
%B超前A时的四倍频程序
%   此处显示详细说明
num_FHG(1)=0;
t_FHG=[];
t_clock=0:delta_t_sample:delta_t_sample*(l_num-1);
j=2;
k=1;
for i=1:l_num-1
    if A_vol(i)==1&&B_vol(i)==0&&A_vol(i+1)==1&&B_vol(i+1)==1
        num_FHG(j)=num_FHG(j-1)+1;
        t_FHG(k)=t_clock(i);
        j=j+1;
        k=k+1;
    else if A_vol(i)==1&&B_vol(i)==1&&A_vol(i+1)==0&&B_vol(i+1)==1
            num_FHG(j)=num_FHG(j-1)+1;
            t_FHG(k)=t_clock(i);
            j=j+1;
            k=k+1;
        else if A_vol(i)==0&&B_vol(i)==1&&A_vol(i+1)==0&&B_vol(i+1)==0
                num_FHG(j)=num_FHG(j-1)+1;
                t_FHG(k)=t_clock(i);
                j=j+1;
                k=k+1;
            else if A_vol(i)==0&&B_vol(i)==0&&A_vol(i+1)==1&&B_vol(i+1)==0
                    num_FHG(j)=num_FHG(j-1)+1;
                    t_FHG(k)=t_clock(i);
                    j=j+1;
                    k=k+1;
%                 else num_FHG(j)=num_FHG(j-1);
%                      t_FHG(k)=t_clock(i);
%                      j=j+1;
%                      k=k+1;
                end
            end
        end
    end
    i=i+1;
end
clear i j k;
num_FHG(1)=[];
t_FHG=t_FHG-t_FHG(1);
% t_FHG(1)=[];
clear A_vol;
clear B_vol;
clear t_clock;
end

